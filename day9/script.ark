(import std.String :join)
(import std.List :forEach)

(let file (io:readFile "input.txt"))
(let length (len file))

(mut diskmap "")
(mut total_used_blocks 0)
(mut total_free_blocks 0)

(mut id 0)
(mut i 0)
(while (< i length) {
    (let used_blocks (@ file i))
    (set total_used_blocks (+ total_used_blocks (toNumber used_blocks)))
    (set diskmap (+ diskmap (join (list:fill (toNumber used_blocks) (toString id)) "")))

    (let free_blocks (@ file (+ i 1)))
    (if (!= free_blocks "\n")
        {
            (set total_free_blocks (+ total_free_blocks (toNumber free_blocks)))
            (set diskmap (+ diskmap (join (list:fill (toNumber free_blocks) ".") "")))
        })

    (set i (+ i 2))
    (set id (+ id 1))
})

(let disk_size (len diskmap))
(set i (- disk_size 1))
(mut continue true)
(while (and continue (> i 0)) {
    (let free_pos (string:find diskmap "."))
    (if (!= -1 free_pos)
        {
            (@= diskmap free_pos (@ diskmap i))
            (@= diskmap i ".")
        })

    (set continue (> i total_used_blocks))
    (set i (- i 1))
})

(mut checksum 0)
(set i 0)
(while (< i total_used_blocks) {
    (print checksum)
    (set checksum (+ checksum (* i (toNumber (@ diskmap i)))))
    (set i (+ i 1))
})
(print checksum)

