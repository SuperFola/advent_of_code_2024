(import std.String :split :join)
(import std.List :map :forEach :any :filter :foldLeft)
(import std.Switch)
(import std.Math :log10)

(let file (io:readFile "input.txt"))
(let lines (split file "\n"))
(let equations (map lines (fun (el) {
    (let sides (split el ": "))
    (let numbers (split (@ sides 1) " "))

    [(toNumber (head sides)) (map numbers (fun (e) (toNumber e)))] })))

(let tree_search (fun (numbers expected) {
    (let valid (fun (e) (<= e expected)))

    (let add_op (fun (T op number) {
        (mut i 0)
        (mut out [])

        (while (< i (len T)) {
            (let v
                (switch op
                    "+" (+ (@ T i) number)
                    "*" (* (@ T i) number)
                    "||" (+ (* (@ T i) (* 10 (math:floor (log10 number)))) number)
                    _ (@ T i)))
            (if (valid v)
                (append! out v))
            (set i (+ 1 i))
        })

        out }))

    (mut tree [(head numbers)])
    (mut i 1)
    (while (< i (len numbers)) {
        (let one (add_op tree "+" (@ numbers i)))
        (let two (add_op tree "*" (@ numbers i)))
        (set tree (concat one two))

        (set i (+ 1 i)) })

    (any tree (fun (v) (= v expected))) }))

(foldLeft
    (map equations
        (fun (equation) {
            (let expected (head equation))
            (let numbers (@ equation 1))

            (async (fun ()
                (if (tree_search numbers expected)
                    expected
                    0)))
        }))
    0
    (fun (acc thread) {
        (let res (await thread))
        (print (+ acc res))
        (+ acc res) }))
