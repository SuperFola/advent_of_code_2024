(import std.String :split)
(import std.IO)

(let file (io:readFile "input.txt"))
(let lines (split file "\n"))
(let height (len lines))
(let width (len (head lines)))

(let get (fun (x y)
    (if (and (< x width) (< y height) (>= x 0) (>= y 0))
        (@ (@ lines y) x)
        nil)))

(let search (fun (x y) {
    (mut found 0)

    # M M
    #  A
    # S S
    (if (and (= "M" (get (- x 1) (- y 1))) (= "M" (get (+ x 1) (- y 1)))
             (= "S" (get (- x 1) (+ y 1))) (= "S" (get (+ x 1) (+ y 1))))
        (set found (+ 1 found)))

    # S S
    #  A
    # M M
    (if (and (= "S" (get (- x 1) (- y 1))) (= "S" (get (+ x 1) (- y 1)))
             (= "M" (get (- x 1) (+ y 1))) (= "M" (get (+ x 1) (+ y 1))))
        (set found (+ 1 found)))

    # M S
    #  A
    # M S
    (if (and (= "M" (get (- x 1) (- y 1))) (= "S" (get (+ x 1) (- y 1)))
             (= "M" (get (- x 1) (+ y 1))) (= "S" (get (+ x 1) (+ y 1))))
        (set found (+ 1 found)))

    # S M
    #  A
    # S M
    (if (and (= "S" (get (- x 1) (- y 1))) (= "M" (get (+ x 1) (- y 1)))
             (= "S" (get (- x 1) (+ y 1))) (= "M" (get (+ x 1) (+ y 1))))
        (set found (+ 1 found)))

    found
}))

(mut count 0)

(mut x 0)
(mut y 0)
(while (and (< x width) (< y height)) {
    (if (= "A" (get x y))
        (set count (+ count (search x y))))

    (set x (+ 1 x))
    (if (= width x)
        {
            (set x 0)
            (set y (+ 1 y))
        })
})

(print count)

